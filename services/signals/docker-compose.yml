# Docker Compose for Signal Generation Service Development
# AI Options Trading System - Week 2 Implementation

version: '3.8'

services:
  # Signal Generation Service
  signals:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-ots-signals
    ports:
      - "8004:8004"  # Main service
      - "9094:9090"  # Prometheus metrics
    environment:
      - FLASK_ENV=development
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=sqlite:///data/signals.db
      - LOG_LEVEL=INFO
      - PROMETHEUS_PORT=9090
    volumes:
      - ./src:/app/src
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    depends_on:
      - redis
      - postgres
    networks:
      - ai-ots-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and message queuing
  redis:
    image: redis:7-alpine
    container_name: ai-ots-redis-signals
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - ai-ots-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for signal history and analytics
  postgres:
    image: postgres:15-alpine
    container_name: ai-ots-postgres-signals
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=signals_db
      - POSTGRES_USER=signals_user
      - POSTGRES_PASSWORD=signals_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - ai-ots-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U signals_user -d signals_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-ots-prometheus-signals
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ai-ots-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ai-ots-grafana-signals
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - ai-ots-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Mock data services for development
  mock-data-ingestion:
    image: python:3.11-slim
    container_name: ai-ots-mock-data-ingestion
    ports:
      - "8001:8001"
    volumes:
      - ./mock_services/data_ingestion.py:/app/app.py
    working_dir: /app
    command: >
      sh -c "pip install flask flask-cors requests &&
             python app.py"
    networks:
      - ai-ots-network
    restart: unless-stopped

  mock-analytics:
    image: python:3.11-slim
    container_name: ai-ots-mock-analytics
    ports:
      - "8002:8002"
    volumes:
      - ./mock_services/analytics.py:/app/app.py
    working_dir: /app
    command: >
      sh -c "pip install flask flask-cors numpy pandas &&
             python app.py"
    networks:
      - ai-ots-network
    restart: unless-stopped

  mock-cache:
    image: python:3.11-slim
    container_name: ai-ots-mock-cache
    ports:
      - "8003:8003"
    volumes:
      - ./mock_services/cache.py:/app/app.py
    working_dir: /app
    command: >
      sh -c "pip install flask flask-cors redis &&
             python app.py"
    networks:
      - ai-ots-network
    restart: unless-stopped
    depends_on:
      - redis

# Networks
networks:
  ai-ots-network:
    driver: bridge
    name: ai-ots-network

# Volumes
volumes:
  redis_data:
    name: ai-ots-redis-data
  postgres_data:
    name: ai-ots-postgres-data
  prometheus_data:
    name: ai-ots-prometheus-data
  grafana_data:
    name: ai-ots-grafana-data

