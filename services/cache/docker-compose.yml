# Docker Compose for Cache Service Development
version: '3.8'

services:
  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai-ots-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - ai-ots-network

  # Cache Service
  cache-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-ots-cache-service
    ports:
      - "8001:8001"
    environment:
      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      
      # Service Configuration
      - CACHE_SERVICE_HOST=0.0.0.0
      - CACHE_SERVICE_PORT=8001
      - CACHE_SERVICE_WORKERS=4
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
      # API Configuration
      - API_PREFIX=/api/v1
      - ENABLE_CORS=true
      - CORS_ORIGINS=*
      
      # Rate Limiting
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_REQUESTS=1000
      - RATE_LIMIT_WINDOW=3600
      
      # TTL Settings
      - TTL_STOCK_PRICES=300
      - TTL_OPTIONS_DATA=300
      - TTL_SIGNALS=1800
      - TTL_USER_SESSIONS=3600
      - TTL_ANALYTICS=900
      - TTL_MARKET_STATUS=60
      
      # Monitoring
      - METRICS_ENABLED=true
      - HEALTH_CHECK_ENABLED=true
      - PROMETHEUS_ENABLED=true
      
      # Logging
      - LOG_FILE_ENABLED=true
      - LOG_FILE_PATH=/var/log/ai-ots/cache-service.log
      - LOG_JSON_ENABLED=false
    
    volumes:
      - ./logs:/var/log/ai-ots
      - ./src:/app
    
    depends_on:
      redis:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    restart: unless-stopped
    networks:
      - ai-ots-network

  # Redis Commander (Web UI for Redis)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ai-ots-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - ai-ots-network
    profiles:
      - tools

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-ots-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - ai-ots-network
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ai-ots-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - ai-ots-network
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ai-ots-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

